package com.epro.pos.ui.fragment;

import android.Manifest
import android.app.Activity
import android.app.Dialog
import android.content.Intent
import android.os.Bundle
import android.support.v7.widget.RecyclerView
import android.support.v7.widget.StaggeredGridLayoutManager
import android.text.Editable
import android.text.TextUtils
import android.text.TextWatcher
import android.view.View
import com.epro.pos.R
import com.epro.pos.listener.CartProductChangeEvent
import com.epro.pos.listener.ScanResultEvent
import com.epro.pos.mvp.contract.CheckoutContract
import com.epro.pos.mvp.model.bean.CheckoutOrder
import com.epro.pos.mvp.model.bean.CreateOrderBean
import com.epro.pos.mvp.presenter.CheckoutPresenter
import com.epro.pos.ui.activity.ScanActivity
import com.epro.pos.ui.adapter.KeyboardAdapter
import com.epro.pos.ui.adapter.PayBtnAdapter
import com.epro.pos.utils.PosBusManager
import com.epro.pos.utils.PosConst
import com.mike.baselib.fragment.BaseDialogFragment
import com.mike.baselib.net.exception.ErrorStatus
import com.mike.baselib.utils.*
import com.mike.baselib.view.CommonDialog
import kotlinx.android.synthetic.main.popup_checkout.*
import org.greenrobot.eventbus.EventBus
import org.greenrobot.eventbus.Subscribe
import org.greenrobot.eventbus.ThreadMode
import pub.devrel.easypermissions.AfterPermissionGranted
import pub.devrel.easypermissions.EasyPermissions
import kotlin.math.absoluteValue

/**
 * 结算弹窗
 */
class CheckoutPopup : BaseDialogFragment<CheckoutContract.View, CheckoutPresenter>(), CheckoutContract.View, View.OnClickListener {
    override fun onCancelPosTradeSuccess() {
        toast(getString(R.string.cancel_success))
        dismiss()
    }

    override fun onCheckOrderPaySuccess(payStatus: Int) {
        if (payStatus == PosConst.PAY_SUCCESS) {
            showPayResult()
        } else { //轮询,支付失败

        }
    }


    override fun onClick(p0: View?) {
        when (p0) {
            btnAllCancel -> {
                showWholeOrderCancel()
            }
        }
    }

    override fun getContentLayoutId(): Int {
        return R.layout.popup_checkout
    }


    override fun getWidth(): Int {
        return DisplayManager.getScreenWidth()!! * 9 / 10
    }

    companion object {
        const val TAG = "createOrder"
        const val CASHIER_TYPE = "caseier_type"
        const val MAX_CHECK_COUNT = 5//轮询次数
        const val RC_CAMERA = 100
        const val FOR_SEARCH_RESULT = 11
        fun newInstance(chekoutOrder: CheckoutOrder, isRefund: Boolean): CheckoutPopup {
            val args = Bundle()
            args.putString(ext_createJsonKey(CheckoutOrder::class.java), AppBusManager.toJson(chekoutOrder))
            args.putBoolean(CASHIER_TYPE, isRefund)
            val fragment = CheckoutPopup()
            fragment.arguments = args
            return fragment
        }
    }

    override fun getPresenter(): CheckoutPresenter {
        return CheckoutPresenter()
    }

    override fun onCreateOrderSuccess(result: CreateOrderBean.Result) {
        if (orderType == PosConst.ORDER_TYPE_SALE) {
            if (result.payStatus == PosConst.PAY_SUCCESS) {
                showPayResult()
            } else {
                startPollingCheckOrder(result.orderSn)
            }
        } else {
            showPayResult(true)
        }
    }


    override fun initData() {

    }

    override fun onDestroy() {
        super.onDestroy()
        rxTimer.cancel()
        AppContext.getInstance().mainHandler.removeCallbacksAndMessages(null)
    }

    var checkoutOrder: CheckoutOrder? = null
    var isRefund = false
    var discount = 1F
    var payType = PosConst.PAY_MODE_CASH
    var orderType = PosConst.ORDER_TYPE_SALE
    val rxTimer = RxTimer()
    override fun initView() {
        isRefund = arguments?.getBoolean(CASHIER_TYPE)!!
        checkoutOrder = AppBusManager.fromJsonWithClassKey(arguments!!, CheckoutOrder::class.java)
        if (!isRefund) {
            orderType = PosConst.ORDER_TYPE_SALE
            tvShouldRec.text = getString(R.string.amount_receivable)
            tvAlreadyRec.text = getString(R.string.amount_received)
            rlChange.visibility = View.VISIBLE
        } else {
            orderType = PosConst.ORDER_TYPE_REFUND
            tvShouldRec.text = getString(R.string.amount_to_be_refunded)
            tvAlreadyRec.text = getString(R.string.refunded_amount)
            rlChange.visibility = View.INVISIBLE
        }

        val totalAmount = checkoutOrder?.totalAmount?.toDouble()!!.absoluteValue
        tvAlreadyRecAmount.text = totalAmount.ext_formatAmountWithUnit()
        etMoney.text = totalAmount.ext_formatAmount()

        val shouldRecAmount = checkoutOrder?.totalAmount?.toDouble()!!.absoluteValue
        tvShouldRecAmount.text = shouldRecAmount?.ext_formatAmountWithUnit()
        rvKeyboard.layoutManager = StaggeredGridLayoutManager(4, RecyclerView.VERTICAL)
        rvKeyboard.adapter = KeyboardAdapter(activity!!, ArrayList())
        (rvKeyboard.adapter as KeyboardAdapter).text = totalAmount.ext_formatAmount()
        (rvKeyboard.adapter as KeyboardAdapter).onTextChangeListener = object : KeyboardAdapter.OnTextChangeListener {
            override fun onTextChange(text: String) {
                if (isRefund) {
                    return
                }
                etMoney.text = text
                var alreadyRec = 0.toDouble()
                if (text.isNotEmpty()) {
                    if (text.endsWith(".")) {
                        alreadyRec = text.replace(".", "").toDouble()
                    } else {
                        alreadyRec = text.toDouble()
                    }
                }
                tvAlreadyRecAmount.text = alreadyRec.ext_formatAmountWithUnit()
                updateChangeText(alreadyRec, shouldRecAmount!! * discount.ext_formatDiscount())
            }
        }

        (rvKeyboard.adapter as KeyboardAdapter).onConfirmClickListener = object : KeyboardAdapter.OnConfirmClickListener {
            override fun onConfirmClick(text: String) {
                if (payType != PosConst.PAY_MODE_CASH) {
                    toast(getString(R.string.please_select_cash_payment))
                    return
                }

                val alreadyRec = tvAlreadyRecAmount.text.toString().replace(AppBusManager.getAmountUnit(), "").trim().toDouble() //已收金额
                val discountShouldRecAmount = checkoutOrder!!.totalAmount.toDouble() * discount.ext_formatDiscount()
                if (alreadyRec < discountShouldRecAmount.ext_formatAmount().toDouble()) {
                    toast(getString(R.string.the_amount_received))
                    return
                }

                mPresenter.createOrder(orderType
                        , checkoutOrder!!.totalCount
                        , checkoutOrder!!.totalAmount
                        , discount
                        , discountShouldRecAmount.ext_formatAmount()
                        , payType
                        , checkoutOrder!!.products, "1", null, null, PosConst.CREATE_ORDER)

            }

        }

        (rvKeyboard.adapter as KeyboardAdapter).onCancelClickListener = object : KeyboardAdapter.OnCancelClickListener {
            override fun onCancelClick(text: String) {
                dismiss()
            }
        }

        rvPayBtns.layoutManager = StaggeredGridLayoutManager(4, RecyclerView.VERTICAL)
        rvPayBtns.adapter = PayBtnAdapter(activity!!, ArrayList())
        (rvPayBtns.adapter as PayBtnAdapter).onTextChangeListener = object : PayBtnAdapter.OnTextChangeListener {
            override fun onTextChange(text: String) {
                if (text.contains("0")) { //金额按钮
                    if (isRefund) {
                        return
                    }
                    (rvKeyboard.adapter as KeyboardAdapter).text = text
                    etMoney.text = text
                    val alreadyRec = text.toDouble()
                    tvAlreadyRecAmount.text = alreadyRec.ext_formatAmountWithUnit()
                    updateChangeText(alreadyRec, shouldRecAmount!! * discount.ext_formatDiscount())
                } else { //付款方式按钮
                    when (text) {
                        getString(R.string.cash) -> {
                            payType = PosConst.PAY_MODE_CASH
                        }

                        getString(R.string.zhifubao) -> {
                            if (isRefund) {
                                onlySelectedCashUI()
                                return
                            }
                            payType = PosConst.PAY_MODE_ZFB
                            startScan()
                        }
                        getString(R.string.weixin) -> {
                            if (isRefund) {
                                onlySelectedCashUI()
                                return
                            }
                            payType = PosConst.PAY_MODE_WX
                            startScan()
                        }
                        else -> {
                            onlySelectedCashUI()
                            payType = PosConst.PAY_MODE_OTHER
                            toast(getString(R.string.not_open_yet))
                        }
                    }
                }
            }
        }
    }

    @AfterPermissionGranted(RC_CAMERA)
    private fun startScan() {
        if (EasyPermissions.hasPermissions(activity!!, Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
            // Already have permission, do the thing
            ScanActivity.launchWithScanType(this@CheckoutPopup, FOR_SEARCH_RESULT, ScanActivity.SCAN_FOR_PAY)
        } else {
            // Do not have permissions, request them now
            EasyPermissions.requestPermissions(this, getString(R.string.pls_permission_open_camera),
                    RC_CAMERA, Manifest.permission.CAMERA, Manifest.permission.READ_EXTERNAL_STORAGE, Manifest.permission.WRITE_EXTERNAL_STORAGE)
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (Activity.RESULT_CANCELED == resultCode) {
            if (requestCode == FOR_SEARCH_RESULT) {
                onlySelectedCashUI()
            }
        }
    }

    /**
     * 找零金额更新
     */
    fun updateChangeText(alreadyRec: Double, shouldRecAmount: Double) {
        if (alreadyRec > shouldRecAmount) {
            val change = alreadyRec - shouldRecAmount.ext_formatAmount().toDouble()
            tvChange.text = change.ext_formatAmountWithUnit()
        } else {
            tvChange.text = 0.toDouble().ext_formatAmountWithUnit()
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        etDiscount.removeTextChangedListener(textWatcher)
    }

    override fun initListener() {
        btnAllCancel.setOnClickListener(this)
        etDiscount.addTextChangedListener(textWatcher)
    }

    val textWatcher = object : TextWatcher {
        override fun afterTextChanged(p0: Editable?) {
            val shouldRecAmount = checkoutOrder?.totalAmount?.toDouble()//应收金额
            val alreadyRec = tvAlreadyRecAmount.text.toString().replace(AppBusManager.getAmountUnit(), "").trim().toDouble() //已收金额
            if (TextUtils.isEmpty(p0.toString()) || p0.toString().toInt() >= 100) {
                tvDiscount.text = getString(R.string.discount_percent_100)
                discount = 1F
            } else {
                discount = p0.toString().toInt() / 100F
                tvDiscount.text =getString(R.string.discount)+ "(" + p0.toString().toInt() + "%)"
            }
            val afterDiscount = (shouldRecAmount!! * discount.ext_formatDiscount()).absoluteValue
            tvShouldRecAmount.text = afterDiscount.ext_formatAmountWithUnit()
            //tvDiscountAmount.text = (shouldRecAmount * (1 - discount)).absoluteValue.ext_formatAmountWithUnit()
            tvDiscountAmount.text = (checkoutOrder?.totalAmount?.toDouble()!!.absoluteValue - afterDiscount.ext_formatAmount().toDouble()).ext_formatAmountWithUnit()
            updateChangeText(alreadyRec, shouldRecAmount * discount.ext_formatDiscount())
            if (isRefund) {
                val alreadyRefundAmount = checkoutOrder?.totalAmount?.toDouble()!!.absoluteValue
                tvAlreadyRecAmount.text = (alreadyRefundAmount * discount.ext_formatDiscount()).ext_formatAmountWithUnit()
                etMoney.text = (alreadyRefundAmount * discount.ext_formatDiscount()).ext_formatAmount()
            }
        }

        override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
        }

        override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {
        }

    }

    //整单取消弹框
    private fun showWholeOrderCancel() {
        CommonDialog.Builder(activity!!)
                .setContent(getString(R.string.you_want_to_cancel_the_entire_order))
                .setOnConfirmListener(object : CommonDialog.OnConfirmListener {
                    override fun onClick(dialog: Dialog) {
                        dialog.dismiss()
                        PosBusManager.clearCartProducts()
                        EventBus.getDefault().post(CartProductChangeEvent())
                        dismiss()
                    }
                })
                .create()
                .show()
    }

    fun startPollingCheckOrder(orderSn: String) {
        rxTimer.interval(3000, RxTimer.IRxNext {
            if (it > MAX_CHECK_COUNT - 1) {
                showConfirmOrderResult(orderSn)
            } else {
                mPresenter.checkOrderPay(orderSn, PosConst.CHECK_ORDER_PAY)
            }
        })
    }

    override fun showError(errorMsg: String, errorCode: Int, type: String) {
        super.showError(errorMsg, errorCode, type)
        when (type) {
            PosConst.CREATE_ORDER -> {
                if (errorCode != ErrorStatus.TOKEN_EXPIERD) {
                    showPayResult(false)
                }
            }
            PosConst.CHECK_ORDER_PAY -> {
                if (errorCode != ErrorStatus.TOKEN_EXPIERD) {
                    showPayResult(false)
                }
            }
        }
    }

    override fun dismissLoading(errorMsg: String, errorCode: Int, type: String) {
        if (PosConst.CHECK_ORDER_PAY == type) {
            if (ErrorStatus.SUCCESS == errorCode) {
                if (rxTimer.recyCount > MAX_CHECK_COUNT - 1) {
                    super.dismissLoading(errorMsg, errorCode, type)
                }
            }
        } else {
            super.dismissLoading(errorMsg, errorCode, type)
        }
    }

    //付款或者退款成功
    private fun showPayResult(isSuccess: Boolean = true) {
        rxTimer.cancel()
        mPresenter.clearSubscription()
        val amount = (checkoutOrder!!.totalAmount.toDouble() * discount.ext_formatDiscount()).ext_formatAmountWithUnit()
        val dialog = CommonDialog.Builder(activity!!)
                .setTitle(if (!isRefund) if (isSuccess) getString(R.string.debit_success) else getString(R.string.debit_failed) else if (isSuccess) getString(R.string.refund_successfully) else getString(R.string.refund_failed))
                .setContent(PosBusManager.getPayModeText(payType) + if (!isRefund) "\n " +getString(R.string.deduction_money)+ amount else "\n"+getString(R.string.refund_amount) + amount)
                .setCancelIsVisibility(false)
                .setOnConfirmListener(object : CommonDialog.OnConfirmListener {
                    override fun onClick(dialog: Dialog) {
                        dialog.dismiss()
                        onlySelectedCashUI()
                        if (isSuccess) {
                            dismiss()
                            PosBusManager.clearCartProducts()
                            EventBus.getDefault().post(CartProductChangeEvent())
                        } else {

                        }
                    }
                })
                .create()
        dialog.show()
        if (isSuccess) {
            AppContext.getInstance().mainHandler.postDelayed(Runnable {
                dialog.dismiss()
                onlySelectedCashUI()
                dismiss()
                PosBusManager.clearCartProducts()
                EventBus.getDefault().post(CartProductChangeEvent())
            }, 2000)
        }
    }


    /**
     * 确认支付结果
     */
    private fun showConfirmOrderResult(orderSn: String) {
        rxTimer.cancel()
        mPresenter.clearSubscription()
        CommonDialog.Builder(activity!!)
                .setContent(getString(R.string.not_search_result))
                .setOnConfirmListener(object : CommonDialog.OnConfirmListener {
                    override fun onClick(dialog: Dialog) {
                        dialog.dismiss()
                        startPollingCheckOrder(orderSn)
                    }
                })
                .setOnCancelListener(object : CommonDialog.OnCancelListener {
                    override fun onClick(dialog: Dialog) {
                        dialog.dismiss() //取消订单
                        mPresenter.cancelPosTrade(orderSn, PosConst.CANCEL_POS_TRADE)
                    }
                })
                .create()
                .show()

    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    fun onScanResultEvent(event: ScanResultEvent) {
        if (event.scanType == ScanActivity.SCAN_FOR_PAY) {
            val code = event.result
            mPresenter.createOrder(orderType
                    , checkoutOrder!!.totalCount
                    , checkoutOrder!!.totalAmount
                    , discount
                    , (checkoutOrder!!.totalAmount.toDouble() * discount.ext_formatDiscount()).ext_formatAmount()
                    , payType
                    , checkoutOrder!!.products, "1", null, code, PosConst.CREATE_ORDER)
        }
    }

    fun onlySelectedCashUI() {
        payType = PosConst.PAY_MODE_CASH
        ext_setAllFalse((rvPayBtns.adapter as PayBtnAdapter).mData)
        (rvPayBtns.adapter as PayBtnAdapter).mData[0].judgeValue = true
        (rvPayBtns.adapter as PayBtnAdapter).notifyDataSetChanged()
    }

}


